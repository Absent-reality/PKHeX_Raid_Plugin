using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using static PKHeX_Raid_Plugin.MapRegion.Region;

namespace PKHeX_Raid_Plugin
{
    public static class MapRegions
    {  

        private static PointF[] ToPoints(params (double x, double y)[] tuples) =>
            [.. tuples.Select(t => new PointF((float)t.x, (float)t.y))];

        public static List<MapRegion.Region> GetMapRegions(int mapIndex)
        {
            return mapIndex switch
            {
                 < 100 => BaseMap.AllRegions,
                >= 190 => CrownTundra.AllRegions,
                _      => IsleOfArmor.AllRegions
            };
        }

        public static class CrownTundra
        {
            public static MapRegion.Region SlipperySlope => new("Slippery Slope", ToPoints
            (
                (415, 700),
                (725, 700),
                (725, 905),
                (670, 905),
                (667.79755, 892.63934),
                (661.40576, 881.4886),
                (651.4503, 872.63934),
                (638.90576, 866.95776),
                (625, 865),
                (415, 865)  
                
            ), RegionType.Main);

            public static MapRegion.Region FrostpointField => new("Frostpoint Field", ToPoints
            (
                (410, 935),
                (425, 935),
                (427.9366, 950.45087),
                (436.45898, 964.3893),
                (449.73288, 975.45087),
                (466.45898, 982.55286),
                (485, 985),
                (670, 985),
                (670, 1045),
                (410, 1045)

            ), RegionType.Main);

            public static MapRegion.Region GiantsBed => new("Giant's Bed", ToPoints
            (
                (410, 1045),
                (1215, 1045),
                (1215, 1225),
                (1365, 1225),
                (1365, 1435),
                (725, 1435),
                (725, 1355),
                (560, 1355),
                (560, 1245),
                (410, 1245)

            ), RegionType.Main);

            public static MapRegion.Region OldCemetery => new("Old Cemetery", ToPoints
            (
                (775, 1215),
                (1005, 1215),
                (1005, 1355),
                (775, 1355)

            ), RegionType.Sub);

            public static MapRegion.Region SnowslideSlope => new("Snowslide Slope", ToPoints
            (
                (815, 565),
                (1075, 565),
                (1075, 765),
                (1100, 765),
                (1230, 855),
                (1230, 1045),
                (1095, 1045),
                (1095, 975),
                (965, 895),
                (885, 895),
                (863.36884, 891.08453),
                (843.85504, 879.7214),
                (828.36884, 862.0228),
                (818.426, 839.7214),
                (815, 815)

            ), RegionType.Main);

            public static MapRegion.Region PathToThePeak => new("Path to the Peak", ToPoints
            (
                (950, 290),
                (1165, 290),
                (1165, 400),
                (950, 400)

            ), RegionType.Main);

            public static MapRegion.Region CrownShrine => new("Crown Shrine", ToPoints
            (
                (850, 10),
                (1100, 10),
                (1100, 290),
                (850, 290)

            ), RegionType.Main);

            public static MapRegion.Region GiantsFoot => new("Giant's Foot", ToPoints
            (
                (1215, 1045),
                (1385, 1045),
                (1385, 1225),
                (1215, 1225)

            ), RegionType.Main);

            public static MapRegion.Region FrigidSea => new("Frigid Sea", ToPoints
            (
                (1420, 665),
                (1630, 665),
                (1630, 625),
                (1765, 625),
                (1811.3525, 628.426),
                (1853.1677, 638.36884),
                (1886.3525, 653.85504),
                (1907.6584, 673.36884),
                (1915, 695),
                (1915, 1015),
                (1908.6373, 1038.1763),
                (1890.1722, 1059.0839),
                (1861.4121, 1075.6763),
                (1825.1722, 1086.3292),
                (1785, 1090),
                (1660, 1090),
                (1660, 1005),
                (1420, 1005)

            ), RegionType.Main);

            public static MapRegion.Region ThreePointPass => new("Three-Point Pass", ToPoints
            (
               (1420, 1005),
               (1660, 1005),
               (1660, 1090),
               (1420, 1090)

            ),RegionType.Main);

            public static MapRegion.Region BallimereLake => new("Ballimere Lake", ToPoints
            (
                (725, 1435),
                (1200, 1435),
                (1200, 1550),
                (1345, 1550),
                (1345, 1765),              
                (1340.5703, 1790.882),
                (1327.5833, 1815),
                (1306.9238, 1835.7107),
                (1280, 1851.6025),
                (1248.6465, 1861.5925),
                (1215, 1865),
                (680, 1865),
                (663.0041, 1862.3081),
                (647.6718, 1854.496),
                (635.5041, 1842.3282),
                (627.6919, 1826.996),
                (625, 1810),
                (625, 1780),
                (627.6919, 1763.004),
                (635.5041, 1747.6718),
                (647.6718, 1735.504),
                (663.0041, 1727.6919),
                (680, 1725),
                (725, 1725)

            ) , RegionType.Main);

            public static MapRegion.Region DynaTreeHill => new("Dyna Tree Hill", ToPoints
            (
                (1055, 1645),
                (1115, 1645),
                (1115, 1710),
                (1055, 1710),
                (1054.282, 1710),
                (1041.5686, 1726.5686),
                (1025, 1739.282),
                (1005.7055, 1747.274),
                (985, 1750),
                (964.2945, 1747.274),
                (945, 1739.282),
                (928.43146, 1726.5686),
                (915.71796, 1710),
                (907.72595, 1690.7056),
                (905, 1670),
                (907.72595, 1649.2944),
                (915.71796, 1630),
                (928.43146, 1613.4314),
                (945, 1600.718),
                (964.2945, 1592.726),
                (985, 1590),
                (1005.7055, 1592.726),
                (1025, 1600.718),
                (1041.5686, 1613.4314),
                (1054.282, 1630)

            ), RegionType.Sub);

            public static List<MapRegion.Region> AllRegions =>
            [
                SlipperySlope,
                FrostpointField,
                GiantsBed,
                OldCemetery,
                SnowslideSlope,
                PathToThePeak,
                CrownShrine,
                GiantsFoot,
                FrigidSea,
                ThreePointPass,
                BallimereLake,
                DynaTreeHill,
            ]; 
        }

        public static class IsleOfArmor
        {
            public static MapRegion.Region FieldsOfHonor => new("Fields of Honor", ToPoints
            (
                (635, 740),
                (915, 740),
                (900, 775),
                (890, 790),
                (875, 805),
                (860, 810),
                (840, 815),
                (815, 815),
                (810, 860),
                (800, 875),
                (795, 885),
                (785, 895),
                (775, 900),
                (760, 905),
                (605, 905),
                (599.6162, 924.15906),
                (583.9919, 941.4427),
                (559.6564, 955.15906),
                (528.9919, 963.9655),
                (495, 967),
                (495, 885),
                (506.64685, 883.637),
                (517.5, 879.641),
                (526.8198, 873.2843),
                (533.9711, 865),
                (538.4667, 855.3528),
                (540, 845),
                (540, 785),
                (635, 785)               
            ), RegionType.Main );

            public static MapRegion.Region SoothingWetlands => new("Soothing Wetlands", ToPoints
            (
                (545, 560),
                (790, 560),
                (790, 560),
                (790.73413, 567.7254),
                (792.86475, 574.69464),
                (796.1832, 580.2254),
                (800.36475, 583.7764),
                (805, 585),
                (815, 605),
                (760, 740),
                (635, 740),
                (635, 715),
                (585, 715),
                (585, 620),
                (545, 620)
            ), RegionType.Main );

            public static MapRegion.Region ForestOfFocus => new("Forest of Focus", ToPoints
            (
                (520, 455),
                (735, 455),
                (735, 490),
                (760, 490),
                (760, 560),
                (515, 560),
                (504.18442, 558.5317),
                (494.42752, 554.2705),
                (486.68442, 547.63354),
                (481.713, 539.2705),
                (480, 530)
            ), RegionType.Main );

            public static MapRegion.Region ChallengeBeach => new("Challenge Beach", ToPoints
            (
                (520, 455),
                (480, 530),
                (481.713, 539.2705),
                (486.68442, 547.63354),
                (494.42752, 554.2705),
                (504.18442, 558.5317),
                (515, 560),
                (545, 560),
                (545, 620),
                (520, 620),
                (510.7295, 621.4683),
                (502.36646, 625.7295),
                (495.7295, 632.36646),
                (491.4683, 640.7295),
                (490, 650),
                (490, 670),
                (330, 670),               
                (322.27457, 670.48944),
                (315.30536, 671.90985),
                (309.77457, 674.12213),
                (306.22357, 676.90985),
                (305, 680),
                (305, 520),
                (306.4683, 510.7295),
                (310.7295, 502.36646),
                (317.36646, 495.7295),
                (325.7295, 491.4683),
                (335, 490),
                (465, 490),
                (467.6919, 479.18442),
                (475.50406, 469.42752),
                (487.6718, 461.68442),
                (503.00406, 456.713)

            ), RegionType.Main);

            public static MapRegion.Region BrawlersCave => new("Brawlers' Cave", ToPoints
            (
                (760, 490),
                (990, 490),
                (993.3378, 490.75217),
                (996.50824, 492.97095),
                (999.35236, 496.54504),
                (1001.7275, 501.2953),
                (1003.5145, 506.9835),
                (1004.6239, 513.32434),
                (1005, 520),
                (975, 585),
                (805, 585),
                (800.36475, 583.7764),
                (796.1832, 580.2254),
                (792.86475, 574.69464),
                (790.73413, 567.7254),
                (790, 560),
                (760, 560)

            ), RegionType.Main);

            public static MapRegion.Region ChallengeRoad => new("Challenge Road", ToPoints
            (
                (865, 265),
                (945, 265),
                (960, 490),
                (840, 490)

            ), RegionType.Main);

            public static MapRegion.Region CourageousCavern => new("Courageous Cavern", ToPoints
            (
                (545, 620),
                (585, 620),
                (585, 715),
                (635, 715),
                (635, 785),
                (540, 785),
                (540, 725),
                (490, 725),
                (490, 650),
                (491.4683, 640.7295),
                (495.7295, 632.36646),
                (502.36646, 625.7295),
                (510.7295, 621.4683),
                (520, 620)

            ), RegionType.Main);

            public static MapRegion.Region LoopLagoon => new("Loop Lagoon", ToPoints
            (
                (540, 725),
                (490, 725),
                (490, 670),
                (330, 670),
                (322.27457, 670.48944),
                (315.30536, 671.90985),
                (309.77457, 674.12213),
                (306.22357, 676.90985),
                (305, 680),
                (305, 885),
                (495, 885),
                (506.64685, 883.637),
                (517.5, 879.641),
                (526.8198, 873.2843),
                (533.9711, 865),
                (538.4667, 855.3528),
                (540, 845)

            ), RegionType.Main);

            public static MapRegion.Region TrainingLowlands => new("Training Lowlands", ToPoints
            (
                (860, 300),
                (610, 300),
                (570, 375),
                (555, 380),
                (520, 455),
                (735, 455),
                (735, 490),
                (840, 490),
                (860, 300)

            ), RegionType.Main );

            public static MapRegion.Region PotbottomDesert => new("Potbottom Desert", ToPoints
            (
                (945, 265),
                (945, 125),
                (943.04224, 111.09424),
                (937.36066, 98.54967),
                (928.5114, 88.59424),          
                (917.36066, 82.20245),
                (905, 80),
                (891.09424, 82.20245),
                (878.5497, 88.59424),
                (868.59424, 98.54967),
                (862.20245, 111.09424),
                (860, 125),
                (860, 145),
                (815, 145),
                (802.63934, 145.97887),
                (791.4886, 148.81966),
                (782.63934, 153.2443),
                (776.95776, 158.81966),
                (775, 165),
                (655, 165),
                (641.09424, 166.95773),
                (628.5497, 172.63931),
                (618.59424, 181.48859),
                (612.20245, 192.63931),
                (610, 205),
                (610, 300),
                (860, 300),
                (865, 265)

            ), RegionType.Main);

            public static MapRegion.Region WorkoutSea => new("Workout Sea", ToPoints
            (
                (1178, 535),
                (1178.55, 548.61),
                (1179.64, 569.29),
                (1180.00, 590.00),
                (1179.64, 610.71),
                (1178.55, 631.39),
                (1176.73, 652.01),
                (1174.19, 672.57),
                (1170.94, 693.02),
                (1166.96, 713.34),
                (1162.28, 733.52),
                (1156.89, 753.51),
                (1150.80, 773.30),
                (1144.02, 792.87),
                (1136.56, 812.19),
                (1128.43, 831.24),
                (1119.63, 849.98),
                (1110.18, 868.41),
                (1100.09, 886.49),
                (1089.37, 904.21),
                (1078.04, 921.54),
                (1066.10, 938.47),
                (1053.58, 954.96),
                (1040.48, 971.00),
                (1026.83, 986.58),
                (1012.65, 1001.67),
                (997.94, 1016.24),
                (982.73, 1030.30),
                (967.04, 1043.81),
                (950.88, 1056.76),
                (934.28, 1069.14),
                (917.25, 1080.93),
                (899.82, 1092.11),
                (882.01, 1102.67),
                (863.83, 1112.60),
                (845.32, 1121.89),
                (826.50, 1130.52),
                (807.39, 1138.49),
                (788.00, 1145.78),
                (768.38, 1152.39),
                (748.53, 1158.30),
                (728.49, 1163.52),
                (708.28, 1168.02),
                (687.92, 1171.82),
                (667.44, 1174.90),
                (646.86, 1177.25),
                (626.22, 1178.89),
                (605.53, 1179.80),
                (584.82, 1179.98),
                (564.12, 1179.43),
                (543.45, 1178.16),
                (522.84, 1176.16),
                (502.31, 1173.45),
                (481.89, 1170.01),
                (461.60, 1165.86),
                (441.47, 1161.00),
                (421.52, 1155.43),
                (401.78, 1149.17),
                (382.27, 1142.22),
                (363.02, 1134.59),
                (344.05, 1126.29),
                (325.38, 1117.33),
                (307.04, 1107.72),
                (289.04, 1097.47),
                (271.42, 1086.59),
                (255, 1075),
                (255, 915),
                (256.4683, 905.7295),               
                (260.7295, 897.36646),
                (267.36646, 890.7295),
                (275.7295, 886.4683),
                (285, 885),
                (305, 885),
                (495, 885),
                (495, 967),
                (528.9919, 963.9655),
                (559.6564, 955.15906),
                (583.9919, 941.4427),
                (599.6162, 924.15906),
                (605, 905),
                (760, 905),
                (775, 900),
                (785, 895),
                (795, 885),
                (800, 875),
                (810, 860),
                (815, 815),
                (840, 815),
                (860, 810),
                (875, 805),
                (890, 790),
                (900, 775),
                (915, 740),
                (1025, 480),
                (1130, 480),
                (1144.8328, 482.6919),
                (1158.2137, 490.50406),
                (1168.8328, 502.6718),
                (1175.6508, 518.0041)

            ), RegionType.Main);

            public static MapRegion.Region SteppingStoneSea => new("Stepping-Stone Sea", ToPoints
            (
                (305, 885), 
                (285, 885), 
                (275.7295, 886.4683),                
                (267.36646, 890.7295),
                (260.7295, 897.36646),
                (256.4683, 905.7295),
                (255, 915),
                (255, 1075),
                (254.19, 1075.11),
                (237.37, 1063.02),
                (220.99, 1050.36),
                (205.06, 1037.12),
                (189.60, 1023.34),
                (174.64, 1009.02),
                (160.19, 994.18),
                (146.27, 978.85),
                (132.90, 963.04),
                (120.09, 946.77),
                (107.86, 930.06),
                (96.22, 912.93),
                (85.19, 895.40),
                (74.79, 877.50),
                (65.01, 859.24),
                (55.89, 840.65),
                (47.42, 821.75),
                (39.62, 802.56),
                (32.50, 783.12),
                (26.07, 763.43),
                (20.33, 743.54),
                (15.29, 723.45),
                (10.96, 703.20),
                (7.35, 682.81),
                (4.45, 662.30),
                (2.27, 641.71),
                (0.82, 621.05),
                (0.09, 600.35),
                (0.09, 579.65),
                (0.82, 558.95),
                (2.27, 538.29),
                (4.45, 517.70),
                (7.35, 497.19),
                (10.96, 476.80),
                (15.29, 456.55),
                (20.33, 436.46),
                (26.07, 416.57),
                (32.50, 396.88),
                (39.62, 377.44),
                (43, 375),
                (305, 375)                              

            ), RegionType.Main);

            public static MapRegion.Region InsularSea => new("Insular Sea", ToPoints
            (
                (43, 375),
                (47.42, 358.25),
                (55.89, 339.35),
                (65.01, 320.76),
                (74.79, 302.50),
                (85.19, 284.60),
                (96.22, 267.07),
                (107.86, 249.94),
                (120.09, 233.23),
                (132.90, 216.96),
                (146.27, 201.15),
                (160.19, 185.82),
                (174.64, 170.98),
                (189.60, 156.66),
                (205.06, 142.88),
                (220.99, 129.64),
                (237.37, 116.98),
                (254.19, 104.89),
                (271.42, 93.41),
                (289.04, 82.53),
                (307.04, 72.28),
                (325, 62.67),
                (325, 345),
                (324.02112, 354.2705),                
                (321.18033, 362.63354),
                (316.7557, 369.2705),
                (311.18033, 373.5317),
                (305, 375)

            ), RegionType.Main);

            public static MapRegion.Region HoneycalmSea => new("Honeycalm Sea", ToPoints
            (
                (325, 345),
                (324.02112, 354.2705),
                (321.18033, 362.63354),
                (316.7557, 369.2705),
                (311.18033, 373.5317),
                (305, 375),
                (305, 520),
                (306.4683, 510.7295),
                (310.7295, 502.36646),
                (317.36646, 495.7295),
                (325.7295, 491.4683),
                (335, 490),
                (465, 490),
                (467.6919, 479.18442),
                (475.50406, 469.42752),
                (487.6718, 461.68442),
                (503.00406, 456.713),
                (520, 455),
                (555, 380),
                (570, 375),
                (610, 300),
                (610, 205),
                (612.20245, 192.63931),
                (618.59424, 181.48859),
                (628.5497, 172.63931),
                (641.09424, 166.95773),
                (655, 165),
                (775, 165),
                (776.95776, 158.81966),
                (782.63934, 153.2443),
                (791.4886, 148.81966),
                (802.63934, 145.97887),
                (815, 145),
                (860, 145),
                (860, 125),
                (862.20245, 111.09424),
                (868.59424, 98.54967),
                (878.5497, 88.59424),
                (891.09424, 82.20245),
                (882.01, 77.33),
                (863.83, 67.40),
                (845.32, 58.11),
                (826.50, 49.48),
                (807.39, 41.51),
                (788.00, 34.22),
                (768.38, 27.61),
                (748.53, 21.70),
                (728.49, 16.48),
                (708.28, 11.98),
                (687.92, 8.18),
                (667.44, 5.10),
                (646.86, 2.75),
                (626.22, 1.11),
                (605.53, 0.20),
                (584.82, 0.02),
                (564.12, 0.57),
                (543.45, 1.84),
                (522.84, 3.84),
                (502.31, 6.55),
                (481.89, 9.99),
                (461.60, 14.14),
                (441.47, 19.00),
                (421.52, 24.57),
                (401.78, 30.83),
                (382.27, 37.78),
                (363.02, 45.41),
                (344.05, 53.71),
                (325, 62.67)

            ), RegionType.Main);

            public static MapRegion.Region HoneycalmIsland => new("Honeycalm Island", ToPoints
            (
                (533.00, 199.00),
                (532.99, 200.61),
                (532.94, 202.22),
                (532.87, 203.83),
                (532.77, 205.44),
                (532.65, 207.04),
                (532.49, 208.64),
                (532.31, 210.24),
                (532.10, 211.84),
                (531.86, 213.43),
                (531.59, 215.02),
                (531.30, 216.60),
                (530.98, 218.18),
                (530.63, 219.75),
                (530.25, 221.32),
                (529.85, 222.88),
                (529.42, 224.43),
                (528.96, 225.97),
                (528.47, 227.51),
                (527.96, 229.03),
                (527.42, 230.55),
                (526.86, 232.06),
                (526.26, 233.56),
                (525.65, 235.04),
                (525.00, 236.52),
                (524.33, 237.98),
                (523.64, 239.43),
                (522.92, 240.87),
                (522.17, 242.30),
                (521.40, 243.72),
                (520.61, 245.12),
                (519.79, 246.50),
                (518.94, 247.87),
                (518.08, 249.23),
                (517.19, 250.57),
                (516.27, 251.90),
                (515.33, 253.21),
                (514.37, 254.50),
                (513.39, 255.77),
                (512.39, 257.03),
                (511.36, 258.27),
                (510.31, 259.50),
                (509.24, 260.70),
                (508.15, 261.88),
                (507.04, 263.05),
                (505.91, 264.20),
                (504.76, 265.32),
                (503.59, 266.43),
                (502.40, 267.51),
                (501.19, 268.58),
                (499.96, 269.62),
                (498.72, 270.64),
                (497.46, 271.64),
                (496.18, 272.62),
                (494.88, 273.57),
                (493.57, 274.50),
                (492.24, 275.41),
                (490.89, 276.30),
                (489.53, 277.16),
                (488.16, 277.99),
                (486.77, 278.81),
                (485.36, 279.60),
                (483.95, 280.36),
                (482.52, 281.10),
                (481.07, 281.81),
                (479.62, 282.50),
                (478.15, 283.17),
                (476.67, 283.80),
                (475.18, 284.41),
                (473.68, 285.00),
                (472.17, 285.56),
                (470.65, 286.09),
                (469.12, 286.60),
                (467.59, 287.07),
                (466.04, 287.53),
                (464.49, 287.95),
                (462.93, 288.35),
                (461.36, 288.72),
                (459.79, 289.06),
                (458.21, 289.38),
                (456.62, 289.66),
                (455.03, 289.92),
                (453.44, 290.15),
                (451.84, 290.36),
                (450.24, 290.53),
                (448.64, 290.68),
                (447.03, 290.80),
                (445.43, 290.89),
                (443.82, 290.96),
                (442.21, 290.99),
                (440.60, 291.00),
                (438.99, 290.98),
                (437.38, 290.93),
                (435.77, 290.85),
                (434.16, 290.75),
                (432.56, 290.61),
                (430.96, 290.45),
                (429.36, 290.26),
                (427.76, 290.04),
                (426.17, 289.80),
                (424.58, 289.52),
                (423.00, 289.22),
                (421.43, 288.89),
                (419.86, 288.54),
                (418.29, 288.15),
                (416.74, 287.74),
                (415.19, 287.30),
                (413.64, 286.84),
                (412.11, 286.35),
                (410.59, 285.83),
                (409.07, 285.28),
                (407.57, 284.71),
                (406.07, 284.11),
                (404.59, 283.49),
                (403.11, 282.84),
                (401.65, 282.16),
                (400.20, 281.46),
                (398.77, 280.73),
                (397.34, 279.98),
                (395.93, 279.21),
                (394.54, 278.40),
                (393.15, 277.58),
                (391.79, 276.73),
                (390.43, 275.86),
                (389.10, 274.96),
                (387.77, 274.04),
                (386.47, 273.10),
                (385.18, 272.13),
                (383.91, 271.14),
                (382.66, 270.13),
                (381.42, 269.10),
                (380.20, 268.05),
                (379.00, 266.97),
                (377.82, 265.88),
                (376.66, 264.76),
                (375.52, 263.63),
                (374.40, 262.47),
                (373.30, 261.29),
                (372.22, 260.10),
                (371.16, 258.89),
                (370.12, 257.66),
                (369.11, 256.41),
                (368.11, 255.14),
                (367.14, 253.85),
                (366.19, 252.55),
                (365.27, 251.24),
                (364.37, 249.90),
                (363.49, 248.55),
                (362.63, 247.19),
                (361.80, 245.81),
                (360.99, 244.42),
                (360.21, 243.01),
                (359.45, 241.59),
                (358.72, 240.16),
                (358.01, 238.71),
                (357.33, 237.25),
                (356.67, 235.78),
                (356.04, 234.30),
                (355.44, 232.81),
                (354.86, 231.30),
                (354.31, 229.79),
                (353.78, 228.27),
                (353.28, 226.74),
                (352.81, 225.20),
                (352.36, 223.65),
                (351.95, 222.10),
                (351.56, 220.54),
                (351.19, 218.97),
                (350.86, 217.39),
                (350.55, 215.81),
                (350.27, 214.23),
                (350.02, 212.64),
                (349.79, 211.04),
                (349.59, 209.44),
                (349.43, 207.84),
                (349.29, 206.24),
                (349.17, 204.63),
                (349.09, 203.02),
                (349.03, 201.41),
                (349.00, 199.81),
                (349.00, 198.19),
                (349.03, 196.59),
                (349.09, 194.98),
                (349.17, 193.37),
                (349.29, 191.76),
                (349.43, 190.16),
                (349.59, 188.56),
                (349.79, 186.96),
                (350.02, 185.36),
                (350.27, 183.77),
                (350.55, 182.19),
                (350.86, 180.61),
                (351.19, 179.03),
                (351.56, 177.46),
                (351.95, 175.90),
                (352.36, 174.35),
                (352.81, 172.80),
                (353.28, 171.26),
                (353.78, 169.73),
                (354.31, 168.21),
                (354.86, 166.70),
                (355.44, 165.19),
                (356.04, 163.70),
                (356.67, 162.22),
                (357.33, 160.75),
                (358.01, 159.29),
                (358.72, 157.84),
                (359.45, 156.41),
                (360.21, 154.99),
                (360.99, 153.58),
                (361.80, 152.19),
                (362.63, 150.81),
                (363.49, 149.45),
                (364.37, 148.10),
                (365.27, 146.76),
                (366.19, 145.45),
                (367.14, 144.15),
                (368.11, 142.86),
                (369.11, 141.59),
                (370.12, 140.34),
                (371.16, 139.11),
                (372.22, 137.90),
                (373.30, 136.71),
                (374.40, 135.53),
                (375.52, 134.37),
                (376.66, 133.24),
                (377.82, 132.12),
                (379.00, 131.03),
                (380.20, 129.95),
                (381.42, 128.90),
                (382.66, 127.87),
                (383.91, 126.86),
                (385.18, 125.87),
                (386.47, 124.90),
                (387.77, 123.96),
                (389.10, 123.04),
                (390.43, 122.14),
                (391.79, 121.27),
                (393.15, 120.42),
                (394.54, 119.60),
                (395.93, 118.79),
                (397.34, 118.02),
                (398.77, 117.27),
                (400.20, 116.54),
                (401.65, 115.84),
                (403.12, 115.16),
                (404.59, 114.51),
                (406.07, 113.89),
                (407.57, 113.29),
                (409.07, 112.72),
                (410.59, 112.17),
                (412.11, 111.65),
                (413.64, 111.16),
                (415.19, 110.70),
                (416.74, 110.26),
                (418.29, 109.85),
                (419.86, 109.46),
                (421.43, 109.11),
                (423.00, 108.78),
                (424.58, 108.48),
                (426.17, 108.20),
                (427.76, 107.96),
                (429.36, 107.74),
                (430.96, 107.55),
                (432.56, 107.39),
                (434.16, 107.25),
                (435.77, 107.15),
                (437.38, 107.07),
                (438.99, 107.02),
                (440.60, 107.00),
                (442.21, 107.01),
                (443.82, 107.04),
                (445.43, 107.11),
                (447.03, 107.20),
                (448.64, 107.32),
                (450.24, 107.47),
                (451.84, 107.64),
                (453.44, 107.85),
                (455.03, 108.08),
                (456.62, 108.34),
                (458.21, 108.62),
                (459.79, 108.94),
                (461.36, 109.28),
                (462.93, 109.65),
                (464.49, 110.05),
                (466.04, 110.47),
                (467.59, 110.93),
                (469.12, 111.40),
                (470.65, 111.91),
                (472.17, 112.44),
                (473.68, 113.00),
                (475.18, 113.59),
                (476.67, 114.20),
                (478.15, 114.83),
                (479.62, 115.50),
                (481.07, 116.19),
                (482.52, 116.90),
                (483.95, 117.64),
                (485.36, 118.40),
                (486.77, 119.19),
                (488.16, 120.01),
                (489.53, 120.84),
                (490.89, 121.70),
                (492.24, 122.59),
                (493.57, 123.50),
                (494.88, 124.43),
                (496.18, 125.38),
                (497.46, 126.36),
                (498.72, 127.36),
                (499.96, 128.38),
                (501.19, 129.42),
                (502.40, 130.49),
                (503.59, 131.57),
                (504.76, 132.68),
                (505.91, 133.80),
                (507.04, 134.95),
                (508.15, 136.12),
                (509.24, 137.30),
                (510.31, 138.50),
                (511.36, 139.73),
                (512.39, 140.97),
                (513.39, 142.23),
                (514.37, 143.50),
                (515.33, 144.79),
                (516.27, 146.10),
                (517.19, 147.43),
                (518.08, 148.77),
                (518.94, 150.13),
                (519.79, 151.50),
                (520.61, 152.88),
                (521.40, 154.28),
                (522.17, 155.70),
                (522.92, 157.13),
                (523.64, 158.57),
                (524.33, 160.02),
                (525.00, 161.48),
                (525.65, 162.96),
                (526.26, 164.44),
                (526.86, 165.94),
                (527.42, 167.45),
                (527.96, 168.97),
                (528.47, 170.49),
                (528.96, 172.03),
                (529.42, 173.57),
                (529.85, 175.12),
                (530.25, 176.68),
                (530.63, 178.25),
                (530.98, 179.82),
                (531.30, 181.40),
                (531.59, 182.98),
                (531.86, 184.57),
                (532.10, 186.16),
                (532.31, 187.76),
                (532.49, 189.36),
                (532.65, 190.96),
                (532.77, 192.56),
                (532.87, 194.17),
                (532.94, 195.78),
                (532.99, 197.39),
                (533.00, 199.00)
            ), RegionType.Sub);

            public static List<MapRegion.Region> AllRegions =>
            [
                FieldsOfHonor,
                SoothingWetlands,
                ForestOfFocus,
                ChallengeBeach,
                BrawlersCave,
                ChallengeRoad,
                CourageousCavern,
                LoopLagoon,
                TrainingLowlands,
                PotbottomDesert,
                WorkoutSea,
                SteppingStoneSea,
                InsularSea,
                HoneycalmSea,
                HoneycalmIsland,
            ];
        }

        public static class BaseMap
        {
            public static MapRegion.Region RollingFields => new("Rolling Fields", ToPoints
            (
                (100, 1005),
                (345, 1005),
                (345, 990),
                (300, 960),
                (300, 825),
                (240, 825),
                (240, 910),
                (220, 925),
                (215, 925),
                (132, 860),
                (132, 825),
                (95, 825),
                (95, 860),
                (125, 880),
                (125, 915),
                (110, 920),
                (100, 920)

            ), RegionType.Main);

            public static MapRegion.Region DappledGrove => new("Dappled Grove", ToPoints
            (
                (100, 1005),
                (100, 920),
                (45, 920),
                (40, 915),
                (40, 885),
                (55, 865),
                (55, 825),
                (10, 825),
                (10, 975),
                (10.407143, 979.2695),
                (11.620285, 983.45197),
                (13.614723, 987.46246),
                (16.349854, 991.21924),
                (19.770016, 994.6458),
                (23.805573, 997.6725),
                (28.374367, 1000.2376),
                (33.3834, 1002.28894),
                (38.730698, 1003.7848),
                (44.307407, 1004.69464),
                (50, 1005)

            ), RegionType.Main);

            public static MapRegion.Region WatchtowerRuins => new("Watchtower Ruins", ToPoints
            (
                (55, 825),
                (55, 732),
                (132, 732),
                (132, 655),
                (55, 655),
                (10, 735),
                (10, 825)

            ), RegionType.Main);

            public static MapRegion.Region EastLakeAxewell => new("East Lake Axewell", ToPoints
            (
                (132, 860),
                (215, 925),
                (220, 925),
                (240, 910),
                (240, 825),
                (300, 825),
                (300, 765),
                (285, 760),
                (280, 750),
                (265, 715),
                (270, 705),
                (285, 705),
                (285, 655),
                (132, 655)

            ), RegionType.Main);

            public static MapRegion.Region WestLakeAxewell => new("West Lake Axewell", ToPoints
            (
                (132, 732),
                (55, 732),
                (55, 865),
                (40, 885),
                (40, 915),
                (45, 920),
                (110, 920),
                (125, 915),
                (125, 880),
                (95, 860),
                (95, 825),
                (132, 825)

            ), RegionType.Main);

            public static MapRegion.Region AxewsEye => new("Axew's Eye", ToPoints
            (
                (167, 825),
                (167.88098, 829.0172),
                (170.4377, 832.64124),
                (174.41986, 835.5172),
                (179.4377, 837.3637),
                (185, 838),
                (186, 838),
                (191.5623, 837.3637),
                (196.58014, 835.5172),
                (200.5623, 832.64124),
                (203.11902, 829.0172),
                (204, 825),
                (204, 800),
                (186, 765),
                (176, 762),
                (171, 764),
                (167, 770)

            ), RegionType.Sub);

            public static MapRegion.Region SouthLakeMiloch => new("South Lake Miloch", ToPoints
            (
                (345, 1005),
                (345, 990),
                (300, 960),
                (300, 765),
                (322, 765),
                (322, 747),
                (355, 747),
                (355, 764),
                (385, 764),
                (385, 935),
                (405, 950),
                (405, 1005)

            ), RegionType.Main);

            public static MapRegion.Region GiantsSeat => new("Giant's Seat", ToPoints
            (
                (385, 764),
                (385, 935),
                (405, 950),
                (405, 1005),
                (413.3889, 1004.4236),
                (421.45538, 1002.7164),
                (428.88953, 999.9441),
                (435.40558, 996.2132),
                (440.7532, 991.6671),
                (444.7268, 986.4805),
                (447.17377, 980.8527),
                (448, 975),
                (448, 764)

            ), RegionType.Main);

            public static MapRegion.Region NorthLakeMiloch => new("North Lake Miloch", ToPoints
            (
                (340, 595),
                (418, 595),
                (418, 650),
                (423.85272, 650.48035),
                (429.4805, 651.903),
                (434.6671, 654.21326),
                (439.2132, 657.3223),
                (442.9441, 661.1107),
                (445.71637, 665.4329),
                (447.42355, 670.12274),
                (448, 675),
                (448, 764),
                (355, 764),
                (355, 747),
                (322, 747),
                (322, 765),
                (300, 765),
                (285, 760),
                (280, 750),
                (265, 715),
                (270, 705),
                (285, 705),
                (285, 655),
                (330, 655),
                (331.9509, 654.7118),
                (333.82684, 653.8582),
                (335.5557, 652.47205),
                (337.07108, 650.6066),
                (338.3147, 648.33356),
                (339.2388, 645.74023),
                (339.80786, 642.92633),
                (340, 640)

            ), RegionType.Main);

            public static MapRegion.Region MotostokeRiverbank => new("Motostoke Riverbank", ToPoints
            (
                (340, 595),
                (340, 440),
                (418, 440),
                (418, 595)

            ), RegionType.Main);

            public static MapRegion.Region BridgeField => new("Bridge Field", ToPoints
            (
                (340, 440),
                (340, 415),
                (339.67334, 427.31912),
                (338.70596, 415.12558),
                (337.13498, 403.88794),
                (335.0208, 394.03806),
                (332.4447, 385.95447),
                (329.5056, 379.94785),
                (326.31653, 376.24896),
                (323, 375),
                (265, 315),
                (264.2314, 312.07364),
                (261.95517, 309.25974),
                (258.2588, 306.66644),
                (253.28427, 304.3934),
                (247.22281, 302.52795),
                (240.30734, 301.1418),
                (232.80362, 300.2882),
                (225, 300),
                (205, 300),
                (201.09819, 299.51962),
                (197.34633, 298.097),
                (193.8886, 295.78674),
                (190.85786, 292.67767),
                (188.3706, 288.88925),
                (186.52242, 284.56708),
                (185.3843, 279.87726),
                (185, 275),
                (185, 255),
                (345, 255),
                (345, 335),
                (418, 420),
                (418, 440)

            ), RegionType.Main);

            public static MapRegion.Region StonyWilderness => new("Stony Wilderness", ToPoints
            (
                (345, 255),
                (345, 172),
                (320, 172),
                (320, 195),
                (319.02112, 199.63525),
                (316.18033, 203.81677),
                (311.7557, 207.13525),
                (306.18033, 209.26585),
                (300, 210),
                (225, 210),
                (218.81966, 209.26585),
                (213.2443, 207.13525),
                (208.81966, 203.81677),
                (205.97887, 199.63525),
                (205, 195),
                (205, 175),
                (180, 175),
                (181.54509, 176.4683),
                (182.93892, 180.72949),
                (184.04509, 187.36644),
                (184.75528, 195.72949),
                (185, 205),
                (185, 255)

            ), RegionType.Main);

            public static MapRegion.Region DustyBowl => new("Dusty Bowl", ToPoints
            (
                (205, 70),
                (345, 70),
                (327, 100),
                (324.83688, 101.46831),
                (322.8855, 105.72949),
                (321.33688, 112.36644),
                (320.3426, 120.72949),
                (320, 130),
                (320, 195),
                (319.02112, 199.63525),
                (316.18033, 203.81677),
                (311.7557, 207.13525),
                (306.18033, 209.26585),
                (300, 210),
                (225, 210),
                (218.81966, 209.26585),
                (213.2443, 207.13525),
                (208.81966, 203.81677),
                (205.97887, 199.63525),
                (205, 195)

            ), RegionType.Main);

            public static MapRegion.Region GiantsMirror => new("Giant's Mirror", ToPoints
            (
                (320, 172),
                (320, 130),  
                (320.3426, 120.72949),
                (321.33688, 112.36644),
                (322.8855, 105.72949),
                (324.83688, 101.46831),
                (327, 100),
                (345, 70),
                (395, 70),
                (360, 96),
                (357.07364, 96.55723),
                (354.25974, 98.2075),
                (351.66644, 100.88738),
                (349.3934, 104.493904),
                (347.52795, 108.88846),
                (346.1418, 113.90218),
                (345.2882, 119.34238),
                (345, 125),
                (345, 172)

            ), RegionType.Main);

            public static MapRegion.Region HammerlockeHills => new("Hammerlocke Hills", ToPoints
            (
                (180, 70),
                (395, 70),
                (395, 27),
                (180, 27)

            ), RegionType.Main);

            public static MapRegion.Region GiantsCap => new("GiantsCap", ToPoints
            (
                (180, 70),
                (180, 140),
                (170, 155),
                (171.9509, 155.3843),
                (173.82683, 156.52242),
                (175.5557, 158.3706),
                (177.07108, 160.85786),
                (178.3147, 163.8886),
                (179.2388, 167.34633),
                (179.80785, 171.09819),
                (180, 175),
                (205, 175),
                (205, 70)

            ), RegionType.Main);

            public static MapRegion.Region LakeofOutrage => new("Lake of Outrage", ToPoints
            (
                (170, 155),
                (180, 140),
                (180, 27),
                (120, 27),
                (120, 75),
                (120.19215, 80.85271),
                (120.76121, 86.4805),
                (121.6853, 91.66711),
                (122.92893, 96.2132),
                (124.4443, 99.94409),
                (126.173164, 102.716385),
                (128.0491, 104.42355),
                (134, 105)

            ), RegionType.Main);
            // Add other regions here...

            public static List<MapRegion.Region> AllRegions =>
            [
                RollingFields,
                DappledGrove,
                WatchtowerRuins,
                EastLakeAxewell,
                WestLakeAxewell,
                AxewsEye,
                SouthLakeMiloch,
                GiantsSeat,
                NorthLakeMiloch,
                MotostokeRiverbank,
                BridgeField,
                StonyWilderness,
                DustyBowl,
                GiantsMirror,
                HammerlockeHills,
                GiantsCap,
                LakeofOutrage,
            ];
        }
    }

    public static class MapRegion
    {
        public class Region
        {

            public enum RegionType
            {               
                Sub,
                Main
            }

            public string Name { get; }
            public List<PointF> Boundary { get; }
            public RegionType Type { get; init; } = RegionType.Main;

            public Region(string name, IEnumerable<PointF> boundary, RegionType type)
            {
                Name = name;
                Boundary = [.. boundary];
                Type = type;
            }

        public bool Contains(PointF point)
            {
                // Ray-casting algorithm for point-in-polygon
                int count = Boundary.Count;
                bool inside = false;

                for (int i = 0, j = count - 1; i < count; j = i++)
                {
                    var pi = Boundary[i];
                    var pj = Boundary[j];

                    if (((pi.Y > point.Y) != (pj.Y > point.Y)) &&
                        (point.X < (pj.X - pi.X) * (point.Y - pi.Y) / (pj.Y - pi.Y) + pi.X))
                    {
                        inside = !inside;
                    }
                }

                return inside;
            }
        }
    }
}
